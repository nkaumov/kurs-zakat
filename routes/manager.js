// routes/manager.js
const express = require('express');
const bcrypt = require('bcrypt');
const router = express.Router();
const pool = require('../config/db');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–µ–Ω–µ–¥–∂–µ—Ä
function ensureManager(req, res, next) {
  if (!req.session.user) {
    return res.redirect('/auth/login');
  }
  if (req.session.user.role !== 'manager') {
    return res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.');
  }
  next();
}

// ================== //
// 1) –ö–∞–±–∏–Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
// ================== //

router.get('/', ensureManager, (req, res) => {
  // –†–µ–Ω–¥–µ—Ä–∏–º "dashboard_manager.hbs" –±–µ–∑ –¥–æ–ø. –¥–∞–Ω–Ω—ã—Ö,
  // —Ç–∞–º –±—É–¥–µ—Ç –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.
  res.render('dashboard_manager', {
    user: req.session.user
  });
});

// ================== //
// 2) –ó–∞—è–≤–∫–∏
// ================== //

// GET /manager/requests - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
router.get('/requests', ensureManager, async (req, res) => {
  try {
    const [requests] = await pool.query(`
      SELECT * FROM requests
      ORDER BY created_at DESC
    `);
    res.render('dashboard_manager', {
      user: req.session.user,
      requests
    });
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫');
  }
});

// GET /manager/requests/:id - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
router.get('/requests/:id', ensureManager, async (req, res) => {
  const requestId = req.params.id;

  try {
    const [[request]] = await pool.query(`
      SELECT * FROM requests WHERE request_id = ?
    `, [requestId]);

    if (!request) {
      return res.send('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const [items] = await pool.query(`
      SELECT * FROM request_items WHERE request_id = ?
    `, [requestId]);

    res.render('manager_request_details', {
      user: req.session.user,
      request,
      items
    });
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ –∑–∞—è–≤–∫–∏');
  }
});


// POST /manager/update-status - —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
router.post('/update-status', ensureManager, async (req, res) => {
  const { request_id, new_status } = req.body;
  try {
    await pool.query(
      'UPDATE requests SET status = ? WHERE request_id = ?',
      [new_status, request_id]
    );
    res.redirect('/manager/requests');
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
  }
});

// ================== //
// 3) –ü–µ—Ä—Å–æ–Ω–∞–ª
// ================== //

// GET /manager/employees - —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
// routes/manager.js
router.get('/employees', ensureManager, async (req, res) => {
  try {
    const [employees] = await pool.query(
      'SELECT * FROM employees WHERE is_deleted = FALSE OR is_deleted IS NULL ORDER BY employee_id DESC'
    );
    

    res.render('manager_employees', {
      user: req.session.user,
      employeesList: employees
    });
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞');
  }
});


// POST /manager/employees/add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–±–µ–∑ –ª–æ–≥–∏–Ω–∞)
router.post('/employees/add', ensureManager, async (req, res) => {
  const { full_name, position, passport_data, phone_number } = req.body;
  try {
    await pool.query(`
      INSERT INTO employees (full_name, position, passport_data, phone_number)
      VALUES (?, ?, ?, ?)
    `, [full_name, position, passport_data, phone_number]);

    res.redirect('/manager/employees');
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
  }
});

router.post('/employees/delete', ensureManager, async (req, res) => {
  const { employee_id } = req.body;

  try {
    await pool.query(`
      UPDATE employees SET is_deleted = TRUE WHERE employee_id = ?
    `, [employee_id]);

    res.redirect('/manager/employees');
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
  }
});

// ================== //
// 4) –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (—à–µ—Ñ / –º–µ–Ω–µ–¥–∂–µ—Ä)
// ================== //

router.get('/create-user', ensureManager, (req, res) => {
  res.render('manager_create_user', {
    user: req.session.user
  });
});

router.post('/create-user', ensureManager, async (req, res) => {
  const { username, password, role } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    await pool.query(`
      INSERT INTO users (username, password, role)
      VALUES (?, ?, ?)
    `, [username, hashedPassword, role]);

    res.redirect('/manager');
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// ================== //
// 5) –ì—Ä–∞—Ñ–∏–∫ (Work Schedule)
// ================== //

// GET /manager/schedule - —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞,
//    + –µ—Å–ª–∏ –≤ query –µ—Å—Ç—å month & year, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º –≥—Ä–∞—Ñ–∏–∫ (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ—Ç)
router.get('/schedule', ensureManager, async (req, res) => {
  const { month, year } = req.query;

  if (!month || !year) {
    // –ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
    return res.render('manager_schedule', {
      user: req.session.user,
      pickMonthYearMode: true
    });
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —á–∏—Å–ª—É
  const scheduleMonth = parseInt(month, 10);
  const scheduleYear = parseInt(year, 10);

  // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫
  let [rows] = await pool.query(
    `SELECT * FROM work_schedules
     WHERE schedule_month = ? AND schedule_year = ?
     LIMIT 1`,
    [scheduleMonth, scheduleYear]
  );

  let schedule;
  if (rows.length === 0) {
    // –ù–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é "—à–∞–ø–∫—É" –≥—Ä–∞—Ñ–∏–∫–∞
    const [result] = await pool.query(`
      INSERT INTO work_schedules (schedule_month, schedule_year, status)
      VALUES (?, ?, 'open')
    `, [scheduleMonth, scheduleYear]);

    // –î–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    [rows] = await pool.query(`SELECT * FROM work_schedules WHERE schedule_id = ?`, [result.insertId]);
  }

  schedule = rows[0];

  // –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ "closed", —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–∞—ë–º
  const isClosed = (schedule.status === 'closed');

  // 2) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  let employees;

  if (schedule.status === 'open') {
    // –î–ª—è –Ω–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    [employees] = await pool.query(`
      SELECT * FROM employees
      WHERE is_deleted = FALSE OR is_deleted IS NULL
      ORDER BY employee_id
    `);
  } else {
    // –î–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö) ‚Äî –≤—Å–µ—Ö, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
    [employees] = await pool.query(`
      SELECT DISTINCT e.*
      FROM employees e
      JOIN work_schedule_details d ON d.employee_id = e.employee_id
      WHERE d.schedule_id = ?
      ORDER BY e.employee_id
    `, [schedule.schedule_id]);
  }
  
    
  // 3) –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ (–¥–æ–ø—É—Å—Ç–∏–º, –≤—Å–µ–≥–¥–∞ 31, –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞—Ç–∞–º)
  //    –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è ‚Äì –≤–æ–∑—å–º—ë–º 31 (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞)
  const daysInMonth = 31;

  // 4) –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const [details] = await pool.query(`
    SELECT * FROM work_schedule_details
    WHERE schedule_id = ?
  `, [schedule.schedule_id]);

  // –ü—Ä–µ–≤—Ä–∞—Ç–∏–º —ç—Ç–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∏–ø–∞:
  //  hoursMap[employee_id][day_of_month] = hours
  const hoursMap = {};
  for (const d of details) {
    const empId = String(d.employee_id);
    const day = String(d.day_of_month);
    if (!hoursMap[empId]) {
      hoursMap[empId] = {};
    }
    hoursMap[empId][day] = d.hours;
  }
  

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ view
  res.render('manager_schedule', {
    user: req.session.user,
    schedule,
    employees,
    daysInMonth,
    hoursMap,
    isClosed
  });
});

// POST /manager/schedule - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤
router.post('/schedule', ensureManager, async (req, res) => {
  console.log("===> RAW BODY:", JSON.stringify(req.body, null, 2)); // –æ—Ç–ª–∞–¥–∫–∞

  const { schedule_id } = req.body;

  // üëá –ü–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Ç–∏–ø–∞ 'hours[1][3]'
  const hoursRaw = req.body;
  const hours = {};

  for (const key in hoursRaw) {
    const match = key.match(/^hours\[(\d+)]\[(\d+)]$/);
    if (match) {
      const empId = match[1];
      const day = match[2];
      const val = parseInt(hoursRaw[key], 10) || 0;

      if (!hours[empId]) {
        hours[empId] = {};
      }
      hours[empId][day] = val;
    }
  }

  if (!hours || Object.keys(hours).length === 0) {
    console.log("‚ö†Ô∏è  hours –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω");
    return res.send('–û—à–∏–±–∫–∞: —á–∞—Å—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã!');
  }

  try {
    const [schRows] = await pool.query(`
      SELECT * FROM work_schedules WHERE schedule_id = ?
    `, [schedule_id]);

    if (schRows.length === 0) {
      return res.send('–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const schedule = schRows[0];
    if (schedule.status === 'closed') {
      return res.send('–ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    for (const empId in hours) {
      for (const day in hours[empId]) {
        const val = hours[empId][day];

        const [exists] = await pool.query(`
          SELECT detail_id FROM work_schedule_details
          WHERE schedule_id = ? AND employee_id = ? AND day_of_month = ?
          LIMIT 1
        `, [schedule_id, empId, day]);

        if (exists.length === 0) {
          await pool.query(`
            INSERT INTO work_schedule_details (schedule_id, employee_id, day_of_month, hours)
            VALUES (?, ?, ?, ?)
          `, [schedule_id, empId, day, val]);
        } else {
          await pool.query(`
            UPDATE work_schedule_details
            SET hours = ?
            WHERE detail_id = ?
          `, [val, exists[0].detail_id]);
        }
      }
    }

    res.redirect(`/manager/schedule?month=${schedule.schedule_month}&year=${schedule.schedule_year}`);
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
});



// POST /manager/schedule/close - –∑–∞–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
router.post('/schedule/close', ensureManager, async (req, res) => {
  const { schedule_id } = req.body;

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º status = 'closed'
    await pool.query(`
      UPDATE work_schedules
      SET status = 'closed'
      WHERE schedule_id = ?
    `, [schedule_id]);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –º–µ—Å—è—Ü/–≥–æ–¥
    const [rows] = await pool.query(`
      SELECT * FROM work_schedules WHERE schedule_id = ?
    `, [schedule_id]);
    if (rows.length === 0) {
      return res.send('–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    const sch = rows[0];
    res.redirect(`/manager/schedule?month=${sch.schedule_month}&year=${sch.schedule_year}`);
  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
  }
});

// ================== //
// 6) –û—Ç—á—ë—Ç—ã
// ================== //

/**
 * 6.1) –û—Ç—á—ë—Ç –ø–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —á–∞—Å–∞–º:
 *      –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ—Å—è—Ü/–≥–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç CSV-—Ñ–∞–π–ª –≤–∏–¥–∞:
 *      employee_id, full_name, total_hours
 */

// GET /manager/report/hours - —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
router.get('/report/hours', ensureManager, (req, res) => {
  res.render('manager_report_hours', {
    user: req.session.user
  });
});

// POST /manager/report/hours - —Ñ–æ—Ä–º–∏—Ä—É–µ–º CSV
router.post('/report/hours', ensureManager, async (req, res) => {
  const { month, year } = req.body;
  if (!month || !year) {
    return res.send('–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥');
  }

  try {
    // –ù–∞–π–¥—ë–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞ –¥–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü/–≥–æ–¥ (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω)
    const [schRows] = await pool.query(`
      SELECT schedule_id FROM work_schedules
      WHERE schedule_month = ? AND schedule_year = ?
    `, [month, year]);

    if (schRows.length === 0) {
      return res.send('–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü/–≥–æ–¥');
    }

    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫ (–±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π)
    const scheduleId = schRows[0].schedule_id;

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ —á–∞—Å—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    // JOIN employees, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –§–ò–û
    const [rows] = await pool.query(`
      SELECT e.employee_id, e.full_name, SUM(d.hours) as total_hours
      FROM work_schedule_details d
      JOIN employees e ON d.employee_id = e.employee_id
      WHERE d.schedule_id = ?
      GROUP BY e.employee_id
    `, [scheduleId]);

    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ res.setHeader + manual join)
    let csv = 'employee_id;full_name;total_hours\n';
    for (const r of rows) {
      csv += `${r.employee_id};${r.full_name};${r.total_hours}\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    const fileName = `hours_report_${month}_${year}.csv`;
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.send(csv);

  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ —á–∞—Å–∞–º');
  }
});

/**
 * 6.2) –û—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º:
 *      –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ—Å—è—Ü/–≥–æ–¥, –ø–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö status='completed'
 *      –∏ created_at –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ (–∏–ª–∏ completed –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π).
 *      –§–æ—Ä–º–∏—Ä—É–µ–º CSV: request_id, request_number, created_at, (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ)
 */

// GET /manager/report/requests - —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
router.get('/report/requests', ensureManager, (req, res) => {
  res.render('manager_report_requests', {
    user: req.session.user
  });
});

// POST /manager/report/requests - —Ñ–æ—Ä–º–∏—Ä—É–µ–º CSV –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º
router.post('/report/requests', ensureManager, async (req, res) => {
  const { month, year } = req.body;
  if (!month || !year) {
    return res.send('–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥');
  }

  // –í–∞—Ä–∏–∞–Ω—Ç: —Å—á–∏—Ç–∞—Ç—å –∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ (status='completed') –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.
  // –ú–æ–∂–Ω–æ –ø–æ –ø–æ–ª—é updated_at (–∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–º–µ–Ω—è–ª—Å—è) –∏–ª–∏ –ø–æ created_at.
  // –ù–∏–∂–µ –ø—Ä–∏–º–µ—Ä - –±–µ—Ä—ë–º created_at –≤ —Ä–∞–º–∫–∞—Ö (year-month).
  try {
    const [rows] = await pool.query(`
      SELECT request_id, request_number, created_at
      FROM requests
      WHERE status = 'completed'
        AND YEAR(created_at) = ?
        AND MONTH(created_at) = ?
      ORDER BY created_at
    `, [year, month]);

    let csv = 'request_id;request_number;created_at\n';
    for (const r of rows) {
      const [items] = await pool.query(`
        SELECT product_name, quantity FROM request_items
        WHERE request_id = ?
      `, [r.request_id]);
    
      const itemsString = items.map(i => `${i.product_name} (${i.quantity})`).join(', ');
    
      csv += `${r.request_id};${r.request_number};${r.created_at};${itemsString}\n`;
    }
    

    const fileName = `requests_report_${month}_${year}.csv`;
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.send(csv);

  } catch (err) {
    console.error(err);
    res.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º');
  }
});

module.exports = router;
